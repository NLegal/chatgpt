import aiohttp
import asyncio
import logging
import time
from typing import List
from urllib.parse import urlparse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_proxy(session, proxy_url):
    """Check the response time for a given proxy server URL."""
    start_time = time.monotonic()
    try:
        async with session.get(proxy_url, timeout=10) as response:
            response_time = time.monotonic() - start_time
            if response.status != 200:
                raise ValueError(f'Response status code is {response.status}')
            else:
                logger.debug(f'Proxy server {proxy_url} responded in {response_time:.2f} seconds')
                return {'proxy': proxy_url, 'response_time': response_time}
    except (aiohttp.ClientError, asyncio.TimeoutError, ValueError) as e:
        logger.debug(f'Error checking proxy server {proxy_url}: {e}')
        return None

async def check_proxies(proxies: List[str]) -> List[dict]:
    """Check the response times for a list of proxy servers."""
    async with aiohttp.ClientSession() as session:
        tasks = [check_proxy(session, proxy) for proxy in proxies]
        results = await asyncio.gather(*tasks)
    return [result for result in results if result is not None]

def parse_proxy_url(proxy_url: str) -> str:
    """Parse a proxy URL and add the `http` scheme if missing."""
    parsed = urlparse(proxy_url)
    if parsed.scheme == '':
        return f'http://{proxy_url}'
    else:
        return proxy_url

async def run_indefinitely(proxies: List[str], interval: int = 60) -> None:
    """Run the proxy checker indefinitely with a given interval."""
    while True:
        try:
            results = await check_proxies(proxies)
            logger.info(f'Checked {len(proxies)} proxies: {results}')
        except Exception as e:
            logger.exception(f'Error checking proxies: {e}')
        await asyncio.sleep(interval)

if __name__ == '__main__':
    proxies = ['http://proxy1.com', 'http://proxy2.com', 'http://proxy3.com']
    loop = asyncio.get_event_loop()
    loop.run_until_complete(run_indefinitely(proxies))

